Notes on how this game works

TypeInfo
 - A TypeInfo is a NameHash statically associated with a class type.
 - This lets us easily store GameSystems in a hash map, for instance.
 - Currently, only Components and GameSystems use the TypeInfo system.
 - For GameObjects there hasn't really been a need yet.

The World Grid
 - Each grid cell contains:
  - Tiles ...
  - GameObjects - Stored in an ObjectBucket
 - There is also a special bucket for Persistent Objects, like the player.

Collision Detection
 - Every GameObject has a rectangular bounding box (an IntRect).
 - Every GameObject belongs to 1 collision channel (a NameHash).
  - Special values are "None" and "Solid".
 - World provides several methods:
  - CheckForSolid - Collides against both tiles and objects, returns a HitResult struct.
  - GatherHitObjectsByChannel - Finds objects of a given channel overlapping a rectangle.
  - FindFirstHitByChannel - Similar, but only returns one object.
  - These functions work by delegating down to check each nearby grid cell.
 - An object can use GatherHitObjectsByChannel in its Tick to handle whatever collisions it cares about.
  - Once you find a GameObject, you could try casting it or find a relevant component.

Movement and Solid Objects
 - GameObject provides TryMoveX and TryMoveY, which move unless/until a solid object (or tile) is hit.
  - The object moves forward one pixel at a time, collision checking ahead of itself.
 - These functions return a HitResult so you can react if you hit something.

UI
 - Objects render in screenspace if rendered on a UI layer.
 - So far, I don't have nay way to "align centre" or "align right".  We assume fixed resolution.
 - At one point I started adding a Widget system but this is *unfinished and not currently used*.
  - I may delete it if it isn't useful.
